---
# process_secret.yml - Processing each secret from pass to Vault

# Check Vault status before writing secret
- name: Check Vault status before processing secret
  ansible.builtin.uri:
    url: "{{ vault_api_addr }}/v1/sys/seal-status"
    method: GET
    body_format: json
    status_code: [200, 429, 500, 503]
  register: vault_status_check
  failed_when: false

- name: Unseal Vault if necessary
  ansible.builtin.uri:
    url: "{{ vault_api_addr }}/v1/sys/unseal"
    method: POST
    body_format: json
    body:
      key: "{{ vault_unseal_key }}"
    status_code: [200]
  when: >-
    vault_unseal_key is defined and
    vault_unseal_key != '' and
    vault_status_check.json is defined and
    vault_status_check.json.sealed | default(true)
  failed_when: false

- name: Get secret from pass
  ansible.builtin.command: pass show {{ secret_path }}
  register: pass_content
  changed_when: false
  delegate_to: localhost
  failed_when: false
  no_log: true

- name: Format secret for Vault
  ansible.builtin.set_fact:
    secret_value: "{{ pass_content.stdout_lines[0] | default('') }}"
    secret_meta: "{{ pass_content.stdout_lines[1:] | default([]) }}"
  when: pass_content.rc is defined and pass_content.rc == 0
  no_log: true

- name: Format secure path for Vault
  ansible.builtin.set_fact:
    vault_path: "{{ secret_path | regex_replace('/', '-') }}"

- name: Write secret to Vault
  ansible.builtin.uri:
    url: "{{ vault_api_addr }}/v1/secret/data/{{ vault_path }}"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body_format: json
    body:
      data:
        password: "{{ secret_value }}"
        metadata: "{{ secret_meta | join('\n') }}"
    status_code: [200, 204, 400, 403, 503]
  register: write_result
  retries: 3
  delay: 2
  when: >-
    vault_token is defined and
    vault_token != '' and
    secret_value is defined and
    secret_value != ''
  failed_when: >-
    write_result.status not in [200, 204] and
    not (write_result.status == 400 and
         write_result.json is defined and
         write_result.json.errors is defined and
         'path is already in use' in (write_result.json.errors[0] | default('')))
  no_log: true
